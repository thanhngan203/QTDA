@model Gemini.Models._05_Website.WRevenueReportModel
@{
    Layout = "~/Views/Shared/_FormList.cshtml";
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">

<form method="post" id="frmReport" class="form-horizontal" role="form">
    <div class="form-group">
        <div class="col-sm-1 col-md-1">
            @Html.LabelFor(m => m.FromAt)
        </div>
        <div class="col-sm-5 col-md-5">
            @Html.Kendo().DateTimePickerFor(model => model.FromAt).HtmlAttributes(new { style = "width:100%;" })
            <div>@Html.ValidationMessageFor(model => model.FromAt)</div>
        </div>
        <div class="col-sm-1 col-md-1">
            @Html.LabelFor(m => m.ToAt)
        </div>
        <div class="col-sm-5 col-md-5">
            @Html.Kendo().DateTimePickerFor(model => model.ToAt).HtmlAttributes(new { style = "width:100%;" })
            <div>@Html.ValidationMessageFor(model => model.ToAt)</div>
        </div>
    </div>
    <div class="form-group" style="text-align: center;">
        <a href="#" onclick="submitForm();" class="k-button k-button-icontext">Thực hiện</a>
        <button type="submit" id="btnLuu" style="visibility: hidden"></button>
    </div>

    <div class="container">
        <canvas id="myChart" style="padding-top: 30px;"></canvas>
    </div>
</form>

<script>
    function submitForm() {
        var validator = $("#frmReport").kendoValidator().data("kendoValidator");
        if (validator.validate() === true) {
            document.getElementById("btnLuu").click();
        }
    };
</script>
<script>
    let myChart = document.getElementById('myChart').getContext('2d');
    // Global Options
    Chart.defaults.global.defaultFontFamily = 'Lato';
    Chart.defaults.global.defaultFontSize = 18;
    Chart.defaults.global.defaultFontColor = '#777';

    var lstLabel = JSON.parse('@Html.Raw(HttpUtility.HtmlDecode(Model.ListLabel))');
    var lstRevenue = JSON.parse('@Html.Raw(HttpUtility.HtmlDecode(Model.ListRevenue))');
    let massPopChart = new Chart(myChart, {
        type: 'bar', // bar, horizontalBar, pie, line, doughnut, radar, polarArea
        data: {
            labels: lstLabel,
            datasets: [{
                label: 'Doanh thu',
                data: lstRevenue,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.6)',
                    'rgba(54, 162, 235, 0.6)',
                    'rgba(255, 206, 86, 0.6)',
                    'rgba(75, 192, 192, 0.6)',
                    'rgba(153, 102, 255, 0.6)',
                    'rgba(255, 159, 64, 0.6)',
                    'rgba(255, 99, 132, 0.6)'
                ],
                borderWidth: 1,
                borderColor: '#777',
                hoverBorderWidth: 3,
                hoverBorderColor: '#000'
            }]
        },
        options: {
            title: {
                display: true,
                text: 'Doanh thu theo ngày',
                fontSize: 25
            },
            legend: {
                display: true,
                position: 'right',
                labels: {
                    fontColor: '#000'
                }
            },
            layout: {
                padding: {
                    left: 50,
                    right: 0,
                    bottom: 0,
                    top: 0
                }
            },
            tooltips: {
                enabled: true
            },
            scales: {
                yAxes: [{
                    ticks: {
                        callback: function (value, index, values) {
                            return value.toLocaleString("it-IT", { style: "currency", currency: "VND" });
                        }
                    }
                }]
            }
        }
    });
</script>